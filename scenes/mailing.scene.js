const { Scenes, Markup } = require('telegraf');
const User = require('../models/User');

class MailingScene {
    constructor() {
        const scene = new Scenes.BaseScene('MAILING_SCENE');
        
        scene.enter(this.showMenu.bind(this));
        scene.action('filter', this.showFilterPrompt.bind(this));
        scene.action('everyone', this.showMessagePrompt.bind(this));
        scene.action('back', ctx => ctx.scene.enter('ADMIN_MENU_SCENE'));
        scene.action('filter', this.showMailingList.bind(this));
        scene.action('more_mailings', this.showNextMailingsPage.bind(this));
        scene.action(/mailing_(\d+)/, this.handleMailingSelect.bind(this));
        scene.on('text', this.handleMessage.bind(this));

        return scene;
    }

    async showMenu(ctx) {
        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('üì® –†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º', 'filter')],
            [Markup.button.callback('üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º', 'everyone')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back')]
        ]);

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:', keyboard);
    }

    async showFilterPrompt(ctx) {
        ctx.session.mailing = { useFilter: true };
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤');
    }

    async showMessagePrompt(ctx) {
        ctx.session.mailing = { useFilter: false };
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
    }

    async showMailingList(ctx, page = 0) {
        try {
            const mailings = await Mailing.getAll();
            ctx.session.mailings = {
                list: mailings,
                currentPage: page
            };

            const keyboard = this.buildMailingsKeyboard(mailings, page);
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:', keyboard);
        } catch (error) {
            console.error('Get mailings error:', error);
            await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!');
            return ctx.scene.reenter();
        }
    }

    buildMailingsKeyboard(mailings, page) {
        const buttons = mailings
            .slice(page * MAILINGS_PER_PAGE, (page + 1) * MAILINGS_PER_PAGE)
            .map(mailing => [
                Markup.button.callback(mailing.name, `mailing_${mailing.id}`)
            ]);

        if (mailings.length > (page + 1) * MAILINGS_PER_PAGE) {
            buttons.push([Markup.button.callback('‚û°Ô∏è –ï—â—ë', 'more_mailings')]);
        }

        buttons.push([Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back')]);

        return Markup.inlineKeyboard(buttons);
    }

    async showNextMailingsPage(ctx) {
        const nextPage = ctx.session.mailings.currentPage + 1;
        await ctx.editMessageReplyMarkup(
            this.buildMailingsKeyboard(ctx.session.mailings.list, nextPage).reply_markup
        );
        ctx.session.mailings.currentPage = nextPage;
    }

    async handleMailingSelect(ctx) {
        const mailingId = parseInt(ctx.match[1]);
        ctx.session.mailing = { 
            useFilter: true,
            selectedMailing: mailingId 
        };
        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
    }

    async handleMessage(ctx) {
        if (!ctx.session.mailing) {
            return ctx.scene.reenter();
        }
    
        try {
            const users = ctx.session.mailing.useFilter
                ? await User.getUsersWithFilter(ctx.session.filters || {})
                : await User.getAll();
    
            const stats = {
                total: users.length,
                success: 0,
                blocked: 0,
                noChat: 0
            };
    
            for (const user of users) {
                if (!user.tgchat) {
                    stats.noChat++;
                    continue;
                }
    
                try {
                    await ctx.telegram.copyMessage(user.tgchat, ctx.chat.id, ctx.message.message_id);
                    stats.success++;
                } catch (error) {
                    if (error.response?.error_code === 403) {
                        stats.blocked++;
                    }
                }
            }
    
            const report = `
    –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
    ‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${stats.success}
    ‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: ${stats.blocked}
    ‚ö†Ô∏è –ù–µ—Ç —á–∞—Ç–∞: ${stats.noChat}
    üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total}
            `.trim();
    
            await ctx.reply(report);
            return ctx.scene.enter('ADMIN_MENU_SCENE');
    
        } catch (error) {
            console.error('Mailing error:', error);
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏');
        }
    }    
}

module.exports = MailingScene;
