const { Scenes, Markup } = require('telegraf');
const Appeal = require('../models/Appeal');
const Email = require('../models/Email');
const User = require('../models/User');
const AppealFiles = require('../models/AppealFiles');
const { sendMessage } = require('../utils/bot-message');

const types = {
    appeal_feature: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é',
    appeal_problem: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ',
    appeal_security: '–í–æ–ø—Ä–æ—Å –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
    appeal_ceo: '–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É',
    appeal_hr: '–í–æ–ø—Ä–æ—Å –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É',
    appeal_labour: '–í–æ–ø—Ä–æ—Å –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞'
};

class FeedbackScene {
    constructor() {
        const scene = new Scenes.BaseScene('FEEDBACK_SCENE');

        scene.enter(this.initSession.bind(this));
        scene.action('next_appeal', this.showNextAppeal.bind(this));
        scene.action('select_appeal', this.selectCurrentAppeal.bind(this));
        scene.action('send_feedback', this.sendFeedback.bind(this));
        scene.action('back', ctx => ctx.scene.enter('ADMIN_MENU_SCENE'));
        scene.on('text', this.handleFeedbackText.bind(this));

        return scene;
    }

    async initSession(ctx) {
        try {
            const userEmails = await Email.getByUser(ctx.session.user.id);
            const uniqueOrganizations = [...new Set(userEmails.map(email => email.organization))];
            const uniqueTypes = [...new Set(userEmails.map(email => email.type))];

            const appeals = await Appeal.getByOrgAndType(uniqueOrganizations, uniqueTypes);

            ctx.session.feedback = {
                currentAppeal: null,
                selectedAppeal: null,
                appeals: appeals
            };

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üìù –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è', 'next_appeal')],
                [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back')]
            ]);

            await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é:', keyboard);
        } catch (error) {
            console.error('Init feedback session error:', error);
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏');
            await ctx.scene.enter('ADMIN_MENU_SCENE');
        }
    }

    async showNextAppeal(ctx) {
        try {
            if (!ctx.session.feedback.appeals?.length) {
                return ctx.reply('–ù–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
            }

            if (ctx.session.feedback.currentAppeal === null ||
                ctx.session.feedback.currentAppeal === undefined) {
                ctx.session.feedback.currentAppeal = 0;
            } else {
                ctx.session.feedback.currentAppeal++;
            }

            // Reset to beginning if we've reached the end
            if (ctx.session.feedback.currentAppeal >= ctx.session.feedback.appeals.length) {
                ctx.session.feedback.currentAppeal = 0;
            }

            const appeal = ctx.session.feedback.appeals[ctx.session.feedback.currentAppeal];

            const keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('‚úÖ –í—ã–±—Ä–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ', 'select_appeal')],
                [Markup.button.callback('üìù –°–ª–µ–¥—É—é—â–µ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ', 'next_appeal')],
                [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back')]
            ]);

            const creator = await User.getUserById(appeal.creator);
            let message = `üìù –û–±—Ä–∞—â–µ–Ω–∏–µ:\n\n${appeal.text}\n\n`;
            message += `–¢–∏–ø: ${types[appeal.type] || ''}\n`;
            message += `–ê–≤—Ç–æ—Ä: ${creator ? creator.name : '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}`;

            let files = [];
            try {
                files = await AppealFiles.getFilesByAppeal(appeal.id);
            } catch (error) {
                console.error('Error fetching files:', error);
                files = [];
            }

            await sendMessage(ctx, {
                text: message,
                files: files || [],
                keyboard: keyboard
            });
        } catch (error) {
            console.error('Show appeal error:', error);
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è');
        }
    }

    async selectCurrentAppeal(ctx) {
        ctx.session.feedback.selectedAppeal =
            ctx.session.feedback.appeals[ctx.session.feedback.currentAppeal];

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back')]
        ]);

        await ctx.reply('–í—ã–±—Ä–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', keyboard);
    }

    async handleFeedbackText(ctx) {
        ctx.session.feedback.replyText = ctx.message.text;

        const keyboard = Markup.inlineKeyboard([
            [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', 'send_feedback')],
            [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back')]
        ]);

        await ctx.reply('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞:', keyboard);
    }

    async sendFeedback(ctx) {
        if (!ctx.session.feedback.selectedAppeal) {
            return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ');
        }

        if (!ctx.session.feedback.replyText) {
            return ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞');
        }

        try {
            const appeal = ctx.session.feedback.selectedAppeal;

            const creator = await User.getUserById(appeal.creator);

            if (!creator || !creator.tgchat) {
                return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∞–≤—Ç–æ—Ä–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è');
            }

            try {
                const text = `üîî –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n${ctx.session.feedback.selectedAppeal.text.slice(0, 100)}${ctx.session.feedback.selectedAppeal.text.length >= 100 ? '...' : ''}\n\n üó£Ô∏è${ctx.session.feedback.replyText}`;

                await sendMessage(ctx.telegram, {
                    text: text,
                    chatId: creator.tgchat
                });

                await ctx.reply('‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ—Ä—É –æ–±—Ä–∞—â–µ–Ω–∏—è');

                await Appeal.updateResponded(appeal.id);

            } catch (error) {
                console.error('Send feedback error:', error);
                await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞');
            }

            return ctx.scene.enter('ADMIN_MENU_SCENE');

        } catch (error) {
            console.error('Send feedback error:', error);
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞');
        }
    }
}

module.exports = FeedbackScene;