const { Scenes, Markup } = require('telegraf');
const News = require('../models/News');

const MAX_TEXT_LENGTH = 1024; 
const HELP_TEXT = `
üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:

1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–¥–æ ${MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤)
2. –î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
3. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å"

‚úèÔ∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç - –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚ùå –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª - —É–¥–∞–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–º
`.trim();

class NewsScene {
    constructor() {
        const scene = new Scenes.BaseScene('ADD_NEWS_SCENE');
        
        scene.enter(this.initSession.bind(this));
        scene.on('text', this.handleText.bind(this));
        scene.on(['photo', 'video'], this.handleMedia.bind(this));
        scene.action('send', this.handleSend.bind(this));
        scene.action('help', this.showHelp.bind(this));
        scene.action('back', this.handleBack.bind(this));
        scene.action('toggle_template', this.toggleTemplate.bind(this));
        scene.on('edited_message', this.handleEdit.bind(this));
        scene.on('message_delete', this.handleDelete.bind(this));

        return scene;
    }

    buildKeyboard(ctx) {
        if (ctx.session.user.status === 'admin') {
            return Markup.inlineKeyboard([
                [Markup.button.callback(
                    ctx.session.newsData?.isTemplate ? '–û—Ç–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω' : '–°–¥–µ–ª–∞—Ç—å —à–∞–±–ª–æ–Ω–æ–º', 
                    'toggle_template'
                )],        
                [Markup.button.callback('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', 'send')],
                [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')],
                [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back')]
            ]);
        } else {
            return Markup.inlineKeyboard([
                [Markup.button.callback('üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å', 'send')],
                [Markup.button.callback('‚ùì –ü–æ–º–æ—â—å', 'help')],
                [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'back')]
            ]);
        }
    }

    async toggleTemplate(ctx) {
        ctx.session.newsData.isTemplate = !ctx.session.newsData.isTemplate;
        await ctx.editMessageReplyMarkup(this.buildKeyboard(ctx).reply_markup);
    }

    async initSession(ctx) {
        ctx.session.newsData = {
            text: null,
            textMessageId: null,
            files: [],
            isTemplate: false
        };

        await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã:', this.buildKeyboard(ctx));
    }

    async handleText(ctx) {
        if (ctx.session.newsData.text) {
            return ctx.reply('–¢–µ–∫—Å—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å.');
        }

        if (ctx.message.text.length > MAX_TEXT_LENGTH) {
            return ctx.reply(`–¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
        }

        ctx.session.newsData.text = ctx.message.text;
        ctx.session.newsData.textMessageId = ctx.message.message_id;
        await ctx.reply('–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ—Å—Ç—å.');
    }

    async handleMedia(ctx) {
        const fileId = ctx.message.photo ? 
            ctx.message.photo[ctx.message.photo.length - 1].file_id : 
            ctx.message.video.file_id;
            
        ctx.session.newsData.files.push({
            id: fileId,
            messageId: ctx.message.message_id
        });
        await ctx.reply('–ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω.');
    }

    async handleEdit(ctx) {
        if (ctx.editedMessage.text && 
            ctx.editedMessage.message_id === ctx.session.newsData.textMessageId) {
            
            if (ctx.editedMessage.text.length > MAX_TEXT_LENGTH) {
                return ctx.reply(`–¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç ${MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.`);
            }

            ctx.session.newsData.text = ctx.editedMessage.text;
            await ctx.reply('–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω.');
        }
    }

    async handleDelete(ctx) {
        if (ctx.message.message_id === ctx.session.newsData.textMessageId) {
            ctx.session.newsData.text = null;
            ctx.session.newsData.textMessageId = null;
            await ctx.reply('–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω.');
        }

        ctx.session.newsData.files = ctx.session.newsData.files.filter(
            file => file.messageId !== ctx.message.message_id
        );
    }

    async handleSend(ctx) {
        if (!ctx.session.newsData.text) {
            return ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏!');
        }

        try {
            await News.addPost(ctx.session.user.id, {
                newsText: ctx.session.newsData.text,
                photo: ctx.session.newsData.files.map(f => f.id),
                template: ctx.session.newsData.isTemplate
            });

            await ctx.reply('–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
            return ctx.scene.enter(ctx.session.user.status === 'admin' ? 'ADMIN_MENU_SCENE' : 'MAIN_MENU_SCENE');
        } catch (error) {
            console.error('Add news error:', error);
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }

    async showHelp(ctx) {
        await ctx.reply(HELP_TEXT);
    }

    handleBack(ctx) {
        return ctx.scene.enter(ctx.session.user.status === 'admin' ? 'ADMIN_MENU_SCENE' : 'MAIN_MENU_SCENE');
    }
}

module.exports = NewsScene;
